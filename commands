Github steps:

Start of day:
git status
git pull
git branch
git branch -r
git branch -a
git fetch -all
git pull -all

During Day:
git add .
git commit -m "comments"
git push

Webserver steps:
#!/bin/bash

# Setup New Hostname
sudo hostnamectl set-hostname "web.cloudbinary.com"

# Update Hostname in /etc/hosts file
echo "`hostname -I | awk '{ print $1 }'` `hostname`" >> /etc/hosts

# Refresh the terminal
/bin/bash

# To Restart SSM Agent on Ubuntu 
sudo systemctl restart snap.amazon-ssm-agent.amazon-ssm-agent.service

# Download, Install and Configure WebServer 
sudo apt-get update
sudo apt-get install apache2 -y 

# Attach Instance profile To EC2 Instance 
# aws ec2 associate-iam-instance-profile --iam-instance-profile Name=CB-SSM-EC2 --instance-id "i-011db5196a0f94d05"

Database shell script:
#!/bin/bash

# Setup New Hostname
sudo hostnamectl set-hostname "mysql.cloudbinary.io"

# Update Hostname in /etc/hosts file
echo "`hostname -I | awk '{ print $1 }'` `hostname`" >> /etc/hosts

# Refresh the terminal
/bin/bash

# To Restart SSM Agent on Ubuntu 
sudo systemctl restart snap.amazon-ssm-agent.amazon-ssm-agent.service

# Download, Install and Configure MySQL Database
sudo apt-get update
sudo apt-get install mysql-server -y 

# Verification:
# systemctl status mysql
# systemctl restart mysql 
# systemctl status mysql 

# ps -aux | grep mysql 

# For the first time, we should configure DB
# sudo mysql_secure_installation

# mysql> create user 'spider'@'%' IDENTIFIED BY 'Azure@123456'; (user can access db from anywhere)
# Query OK, 0 rows affected (0.01 sec)

# mysql> GRANT ALL ON *.* TO 'spider'@'%';( user can access any schema)
# Query OK, 0 rows affected (0.01 sec)

# mysql> FLUSH PRIVILEGES; (Save changes)
# Query OK, 0 rows affected (0.00 sec)

# Attach Instance profile To EC2 Instance 
# aws ec2 associate-iam-instance-profile --iam-instance-profile Name=SA-EC2-SSM --instance-id "i-0b634ed4a13262892"

Linux Commands:

Webserver:

sudo su
sudo apt-get update
sudo apt-get apache2 -y
pwd
hostname
cat /etc/hosts
hostname -I
ps -aux| grep apache2
systemctl status apache2
ls -lrt /var/www/html/index.html\
cd /var/www/html
rm -f index.html
git clone https://github.com/keshavkummari/keshavkummari.git
cp -pvr keshavkummari/* .

Database:
sudo su
Process check: ps -aux| grep mysql ( Process status -all users execution) Similar to task manager
Deamon check: systemctl status mysql
Port check: netstat -ltpn( t-tcp, p- port, n- number( Check if port is listening or not)
top
mysql(start mysql)
show databases;
use mysql;
show tables;
touch mysql-output.txt
ls -lrt /etc/mysql/mysql.conf.d/mysqld.cnf
vi /etc/mysql/mysql.conf.d/mysqld.cnf
remove line 31 i: 0.0.0.0
systemctl restart mysql

Process check: ps -aux| grep mysql ( Process status -all users execution) Similar to task manager
Deamon check: systemctl status mysql
Port check: netstat -ltpn( t-tcp, p- port, n- number( Check if port is listening or not)

Connect using mysql from local

Application Server:

Scripts:
#!/bin/bash

# Setup New Hostname
sudo hostnamectl set-hostname "tomcat.cloudbinary.io"

# Update Hostname in /etc/hosts file
echo "`hostname -I | awk '{ print $1 }'` `hostname`" >> /etc/hosts

# Refresh the terminal
/bin/bash

# Update Ubuntu Repository 
sudo apt-get update 

# Download, & Install Utility Softwares 
sudo apt-get install git wget unzip curl tree -y 

# Download, Install Java 11
sudo apt-get install openjdk-11-jdk -y

# Backup the Environment File
sudo cp -pvr /etc/environment "/etc/environment_$(date +%F_%R)"

# Create Environment Variables 
echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/" >> /etc/environment

# Compile the Configuration 
source /etc/environment

# Go to /opt directory to download Apache Tomcat 
cd /opt/

# Download Apache Tomcat - Application
sudo wget https://downloads.apache.org/tomcat/tomcat-8/v8.5.84/bin/apache-tomcat-8.5.84.tar.gz


# Extract the Tomcat File
sudo tar xvzf apache-tomcat-8.5.84.tar.gz

# Rename the Tomcat Folder
sudo mv apache-tomcat-8.5.84 tomcat

# Go Inside the Tomcat Folder
cd /opt/tomcat/

# Take Tomcat Configuration as backup 
sudo cp -pvr /opt/tomcat/conf/tomcat-users.xml "/opt/tomcat/conf/tomcat-users.xml_$(date +%F_%R)"

# To delete last line and which contains </tomcat-users>
sed -i '$d' /opt/tomcat/conf/tomcat-users.xml

#Add User & Attach Roles to Tomcat 
echo '<role rolename="manager-gui"/>'  >> /opt/tomcat/conf/tomcat-users.xml
echo '<role rolename="manager-script"/>' >> /opt/tomcat/conf/tomcat-users.xml
echo '<role rolename="manager-jmx"/>'    >> /opt/tomcat/conf/tomcat-users.xml
echo '<role rolename="manager-status"/>' >> /opt/tomcat/conf/tomcat-users.xml
echo '<role rolename="admin-gui"/>'     >> /opt/tomcat/conf/tomcat-users.xml
echo '<role rolename="admin-script"/>' >> /opt/tomcat/conf/tomcat-users.xml
echo '<user username="admin" password="redhat@123" roles="manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script"/>' >> /opt/tomcat/conf/tomcat-users.xml
echo "</tomcat-users>" >> /opt/tomcat/conf/tomcat-users.xml

# Start Tomcat Server
cd /opt/tomcat/bin/

./startup.sh

# vi /opt/tomcat/webapps/host-manager/META-INF/context.xml

# grep -H -n "|.*" webapps/host-manager/META-INF/context.xml
# webapps/host-manager/META-INF/context.xml:20:         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|.*" />

# allow="*"

# vi /opt/tomcat/webapps/manager/META-INF/context.xml

# grep -H -n "|.*" webapps/manager/META-INF/context.xml
# webapps/manager/META-INF/context.xml:20:         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|.*" />

# allow="*"
- Apache Tomcat 
        - UI :
            - 3 Pages : 
                1. Server Status :
                    You are not authorized to view this page.
                    By default the Manager is only accessible from a browser running on the same machine as Tomcat. 
                    If you wish to modify this restriction, you'll need to edit the Manager's context.xml file.

                To Fix :
                └── manager
                    ├── META-INF
                        │   └── context.xml

                2. Manager App :
                    You are not authorized to view this page.
                    By default the Manager is only accessible from a browser running on the same machine as Tomcat. 
                    If you wish to modify this restriction, you'll need to edit the Manager's context.xml file.

                To Fix :
                └── manager
                    ├── META-INF
                        │   └── context.xml
# cp -pvr /opt/tomcat/webapps/manager/META-INF/context.xml "/opt/tomcat/webapps/manager/META-INF/context.xml_$(date +%F_%R)"
# vi /opt/tomcat/webapps/manager/META-INF/context.xml

# grep -H -n "|.*" webapps/manager/META-INF/context.xml
# webapps/manager/META-INF/context.xml:20:         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|.*" />


                3. Host Manager :
                    You are not authorized to view this page.
                    By default the Host Manager is only accessible from a browser running on the same machine as Tomcat. 
                    If you wish to modify this restriction, you'll need to edit the Host Manager's context.xml file.

                To Fix :
                    ├── host-manager
                    │   ├── META-INF
                    │   │   └── context.xml


# cp -pvr /opt/tomcat/webapps/host-manager/META-INF/context.xml "/opt/tomcat/webapps/manager/META-INF/context.xml_$(date +%F_%R)"

# vi /opt/tomcat/webapps/host-manager/META-INF/context.xml

# grep -H -n "|.*" webapps/host-manager/META-INF/context.xml
# webapps/host-manager/META-INF/context.xml:20:         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|.*" />



                - Enable Those 3 Pages from Globally
            - User  : admin 
            - Password : redhat@123
            - Roles :
                - Admin : 2  : Roles for Host Manager
                    admin-gui - allows access to the HTML GUI
                    admin-script - allows access to the text interface
                
                - Manager : 4 : Roles for Server Status & Manager App 
                    manager-gui - allows access to the HTML GUI and the status pages
                    manager-script - allows access to the text interface and the status pages
                    manager-jmx - allows access to the JMX proxy and the status pages
                    manager-status - allows access to the status pages only

Continuous Integration:

Jenkins:

What is Jenkins?
Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.

#!/bin/bash

# Setup Hostname 
sudo hostnamectl set-hostname "jenkins.cloudbinary.io"

# Update the hostname part of Host File
echo "`hostname -I | awk '{ print $1 }'` `hostname`" >> /etc/hosts 

# Update Ubuntu Repository 
sudo apt-get update 

# Download, & Install Utility Softwares 
sudo apt-get install git wget unzip curl tree -y 

# Download, Install Java 11
sudo apt-get install openjdk-11-jdk -y

# Backup the Environment File
sudo cp -pvr /etc/environment "/etc/environment_$(date +%F_%R)"

# Create Environment Variables 
echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/" >> /etc/environment

# Compile the Configuration 
source /etc/environment

# Download, Install Java 11
sudo apt-get install maven -y

# Backup the Environment File
sudo cp -pvr /etc/environment "/etc/environment_$(date +%F_%R)"

# Create Environment Variables 
echo "MAVEN_HOME=/usr/share/maven/" >> /etc/environment

# Compile the Configuration 
source /etc/environment

# Add Jenkins Repository 
sudo wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -

# Adding the Jenkins Remote Repository URL in Ubuntu Local Repository Configuration file 
sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/' > /etc/apt/sources.list.d/jenkins.list

# Update the Repository on Ubuntu 22.04
sudo apt-get update 

# Download, Install Jenkins 
sudo apt-get install jenkins -y

# Verify the jenkins service 
# sudo systemctl status jenkins.service

# Enable Jenkins Daemon/Service at Boot
# sudo systemctl enable jenkins.service

# Restart the Jenkins Daemon/Service 
# sudo systemctl restart jenkins.service

# Using Process Status Command 
# ps -aux | grep jenkins 

# To Restart SSM Agent on Ubuntu 
sudo systemctl restart snap.amazon-ssm-agent.amazon-ssm-agent.service

# Attach Instance profile To EC2 Instance 
# aws ec2 associate-iam-instance-profile --iam-instance-profile Name=SA-EC2-SSM --instance-id "i-0e9e906f205822522"



https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

https://www.jenkins.io/doc/pipeline/tour/hello-world/#:~:text=Jenkins%20Pipeline%20(or%20simply%20%22Pipeline,to%20your%20users%20and%20customers.

https://www.jenkins.io/doc/book/pipeline/jenkinsfile/


# There are two types of pipelines in Jenkins:

1. Declarative
2. Scripted

File Name : Jenkinsfile


# 1. Declarative : pipelines break down stages into individual stages that can contain multiple steps.

Jenkinsfile (Declarative Pipeline)
pipeline {
    agent { docker { image 'maven:3.8.4-openjdk-11-slim' } }
    stages {
        stage('build') {
            steps {
                sh 'mvn --version'
            }
        }
    }
}

# 2. Scripted : pipelines use groovy code and refrences to the Jenkins pipeline DSL within the stage elements without the need for steps.

node {
    stage('Hello world') {
        sh 'echo Hello World'
    }
}

node {
    stage('Test') {
        git 'https://github.com/user/project.git'
        sh 'mvn test'
        archiveArtifacts artifacts: 'target/surefire-reports/**'
    }
    stage('Build') {
        sh 'mvn clean package -DskipTests' 
        archiveArtifacts artifacts: 'target/*.jar'
    }
    stage('Deploy') {
        sh 'echo Deploy'
    }
}